/*
*
* Copyright (c) 2021 lowprokb.ca
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define QWERTY  0
#define COLEMAK 1
#define LOWER   2
#define RAISE   3
#define CONFIG  4

/ {
        /*combos {
                compatible = "zmk,combos";
                combo_config {
                        timeout-ms = <50>;
                        key-positions = <24 36>;
                        bindings = <&kp LGUI>;
                };
        };*/
        conditional_layers {
            compatible = "zmk,conditional-layers";
            tri_layer {
                if-layers = <LOWER RAISE>;
                then-layer = <CONFIG>;
            };
        };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        label = "QWERTY";
                        bindings = <
   &kp TAB   &kp Q     &kp W     &kp E     &kp R     &kp T        &kp Y     &kp U     &kp I     &kp O     &kp P     &kp BSPC
   &kp LCTRL &kp A     &kp S     &kp D     &kp F     &kp G        &kp H     &kp J     &kp K     &kp L     &kp SEMI  &kp APOS
   &kp LSHFT &kp Z     &kp X     &kp C     &kp V     &kp B        &kp N     &kp M     &kp COMMA &kp DOT   &kp SLASH &mt RSHFT ENTER
                         &kp LGUI &kp LALT &lt LOWER SPACE        &lt RAISE SPACE &kp RALT &kp RGUI
                        >;
                };

                colemak_layer {
                        label = "COLMAK";
                        bindings = <
   &kp TAB   &kp Q     &kp W     &kp F     &kp P     &kp G        &kp J     &kp L     &kp U     &kp Y     &kp SEMI  &kp BSPC
   &kp LCTRL &kp A     &kp R     &kp S     &kp T     &kp D        &kp H     &kp N     &kp E     &kp I     &kp O     &kp APOS
   &kp LSHFT &kp Z     &kp X     &kp C     &kp V     &kp B        &kp K     &kp M     &kp COMMA &kp DOT   &kp SLASH &mt RSHFT ENTER
                         &kp LGUI &kp LALT &lt LOWER SPACE        &lt RAISE SPACE &kp RALT &kp RGUI
                        >;
                };

                lower_layer {
                        label = "LOWER";
                        bindings = < 
   &kp ESC &kp N1        &kp N2          &kp N3       &kp N4      &kp N5          &kp N6    &kp N7    &kp N8    &kp N9     &kp N0   &kp DEL
   &trans  &kp LEFT      &kp DOWN        &kp UP       &kp RIGHT   &kp TAB         &kp GRAVE &kp MINUS &kp EQUAL &kp LBKT   &kp RBKT &kp BSLH
   &trans  &kp KP_DIVIDE &kp KP_MULTIPLY &kp KP_MINUS &kp KP_PLUS &kp BSPC        &trans    &trans    &trans    &kp KP_DOT &trans   &kp KP_ENTER
                                                      &trans &trans &trans        &mo RAISE &trans &trans
                        >;
                };

                raise_layer {
                        label = "RAISE";
                        bindings = <
   &kp ESC &kp F1    &kp F2    &kp F3   &kp F4   &kp F5                 &kp F6  &kp F7   &kp F8    &kp F9    &kp F10   &kp DEL
   &trans  &kp F11   &kp F12   &kp F13  &kp F14  &kp F15                &kp F16 &kp LEFT &kp DOWN  &kp UP    &kp RIGHT &kp RCTRL
   &trans  &kp CLEAR &kp PSCRN &kp CAPS &kp SLCK &kp PAUSE_BREAK        &kp INS &kp HOME &kp PG_DN &kp PG_UP &kp END   &trans
                                         &trans &trans &mo LOWER        &trans &trans &trans
                        >;
                };
                
                config_layer {
                        label = "CONFIG";
                        bindings = <
   &bt BT_CLR &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4        &none &none      &none        &none            &none      &kp C_PWR
   &none      &kp C_AC_BACK &kp C_AC_STOP &kp C_AC_REFRESH &kp C_AC_FORWARD &none               &none &kp C_PREV &kp C_STOP   &kp C_PLAY_PAUSE &kp C_NEXT &none
   &none      &kp C_BRI_DN  &kp C_BRI_UP  &tog COLEMAK     &out OUT_USB     &out OUT_BLE        &none &kp C_MUTE &kp C_VOL_DN &kp C_VOL_UP     &none      &none
                                                                      &none &none &trans        &trans &none &none
                        >;
                };
        };
};
